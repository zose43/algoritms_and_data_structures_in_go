// Code generated by mockery v2.38.0. DO NOT EDIT.

package hash_table

import mock "github.com/stretchr/testify/mock"

// MockHasher is an autogenerated mock type for the Hasher type
type MockHasher[K comparable] struct {
	mock.Mock
}

type MockHasher_Expecter[K comparable] struct {
	mock *mock.Mock
}

func (_m *MockHasher[K]) EXPECT() *MockHasher_Expecter[K] {
	return &MockHasher_Expecter[K]{mock: &_m.Mock}
}

// makeHash provides a mock function with given fields: key
func (_m *MockHasher[K]) makeHash(key K) (uint64, error) {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for makeHash")
	}

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func(K) (uint64, error)); ok {
		return rf(key)
	}
	if rf, ok := ret.Get(0).(func(K) uint64); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func(K) error); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockHasher_makeHash_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'makeHash'
type MockHasher_makeHash_Call[K comparable] struct {
	*mock.Call
}

// makeHash is a helper method to define mock.On call
//   - key K
func (_e *MockHasher_Expecter[K]) makeHash(key interface{}) *MockHasher_makeHash_Call[K] {
	return &MockHasher_makeHash_Call[K]{Call: _e.mock.On("makeHash", key)}
}

func (_c *MockHasher_makeHash_Call[K]) Run(run func(key K)) *MockHasher_makeHash_Call[K] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(K))
	})
	return _c
}

func (_c *MockHasher_makeHash_Call[K]) Return(_a0 uint64, _a1 error) *MockHasher_makeHash_Call[K] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockHasher_makeHash_Call[K]) RunAndReturn(run func(K) (uint64, error)) *MockHasher_makeHash_Call[K] {
	_c.Call.Return(run)
	return _c
}

// NewMockHasher creates a new instance of MockHasher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockHasher[K comparable](t interface {
	mock.TestingT
	Cleanup(func())
}) *MockHasher[K] {
	mock := &MockHasher[K]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
